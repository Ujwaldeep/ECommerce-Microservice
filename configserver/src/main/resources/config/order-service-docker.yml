spring:
  datasource:
    url: ${DB_URL}
    username: ${DB_USER}
    password: ${DB_PASSWORD}

  cloud:
    stream:
      bindings:
        createOrder-out-0:
          destination: order.exchange.new
          content-type: application/json

      kafka:
        binder:
          brokers: kafka:9092

#      rabbit:
#        bindings:
#          createOrder-out-0:
#            producer:
#              routing-key-expression: '''order.tracking.new'''
##    Cloud AMQP where the rabbit mq hosted
#  rabbitmq:
#    host: ${RABBITMQ_HOST:localhost}
#    port: ${RABBITMQ_PORT:5672}
#    username: ${RABBIT_USERNAME:guest}
#    password: ${RABBIT_PASSWORD:guest}
#    virtual-host: ${RABBIT_VHOST:guest}
#    connection-timeout: 30000
#    exchange:
#      name: order.exchange
#    queue:
#      name: order.queue
#    routing:
#      key: order.tracking



  management:
    endpoints:
      web:
        exposure:
          include: "*"
    tracing:
      sampling:
        probability: 1.0

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update

    database-platform: org.hibernate.dialect.PostgreSQLDialect
    database: postgresql

server:
  port: 8083

eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:8761/eureka/
    register-with-eureka: true
    fetch-registry: true

logging:
  file:
    name: logs/${spring.application.name}.log
  logback:
    rollingpolicy:
      max-file-size: 5MB
      max-history: 7

#Circuit Breaker
resilence4j:
  circuitbreaker:
    instances:
      productService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slidingWindowType: count_based
  retry:
    instances:
      retryBreaker:
        maxAttemps: 5
        waitDuration: 500ms
